#!/usr/bin/env python3
"""
数据安全提取工具 - GUI版 (带导出功能和进度显示)
"""

import os
import re
import json
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from pathlib import Path
import threading
from datetime import datetime
import sys

class DataExtractorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("数据安全提取工具 Generated by R1yhtp")
        self.root.geometry("700x700")  # 增加高度以容纳更多控件
        self.root.configure(bg='#2c3e50')
        
        # 设置窗口图标
        self.set_icon()
        
        # 加载配置
        self.config = self.load_config()
        self.patterns = self.config["patterns"]
        
        # 存储扫描结果
        self.scan_results = {}
        
        # 创建界面
        self.create_widgets()
        
        # 状态变量
        self.is_scanning = False
    
    def get_resource_path(self, filename):
        """获取资源文件的正确路径"""
        try:
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")
        return os.path.join(base_path, filename)
    
    def set_icon(self):
        """设置窗口图标"""
        icon_paths = [
            "app.ico",
            os.path.join(os.path.dirname(__file__), "app.ico"),
            self.get_resource_path("app.ico")
        ]
        
        for icon_path in icon_paths:
            try:
                if os.path.exists(icon_path):
                    self.root.iconbitmap(icon_path)
                    return
            except:
                continue
    
    def load_config(self):
        """加载配置文件"""
        default_config = {
            "patterns": {
                "phone": {
                    "pattern": r'(?<!\d)1[3-9]\d{9}(?!\d)',
                    "description": "手机号",
                    "icon": "📱"
                },
                "id_card": {
                    "pattern": r'(?<!\d)\d{17}[\dXx](?!\d)',
                    "description": "身份证号", 
                    "icon": "🆔"
                },
                "email": {
                    "pattern": r'(?<!\w)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?!\w)',
                    "description": "邮箱地址",
                    "icon": "📧"
                },
                "ipv4": {
                    "pattern": r'(?<!\d)(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?!\d)',
                    "description": "IPv4地址",
                    "icon": "🌐"
                },
                "username": {
                    "pattern": r'(?<!\w)[a-zA-Z0-9_]{4,20}(?!\w)',
                    "description": "用户名",
                    "icon": "👤"
                },
                "url": {
                    "pattern": r'https?://[^\s<>"{}|\\^`\[\]]+',
                    "description": "URL链接",
                    "icon": "🔗"
                },
                "mac_address": {
                    "pattern": r'(?<!\w)(?:[A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}(?!\w)',
                    "description": "MAC地址",
                    "icon": "🔌"
                },
                "date_ymd": {
                    "pattern": r'(?<!\d)(?:19|20)\d{2}[-/年](?:0[1-9]|1[0-2])[-/月](?:0[1-9]|[12][0-9]|3[01])日?(?!\d)',
                    "description": "日期",
                    "icon": "📅"
                },
                "md5": {
                    "pattern": r'(?<!\w)[a-fA-F0-9]{32}(?!\w)',
                    "description": "MD5哈希",
                    "icon": "🔒"
                },
                "base64": {
                    "pattern": r'(?<!\w)[A-Za-z0-9+/]{4,}={1,2}(?!\w)',
                    "description": "Base64编码",
                    "icon": "📄"
                }
            }
        }
        
        config_paths = [
            "config.json",
            os.path.join(os.path.dirname(__file__), "config.json"),
            self.get_resource_path("config.json")
        ]
        
        for config_path in config_paths:
            try:
                if os.path.exists(config_path):
                    with open(config_path, 'r', encoding='utf-8') as f:
                        user_config = json.load(f)
                        default_config.update(user_config)
                    break
            except:
                continue
        
        return default_config
    
    def create_widgets(self):
        """创建界面组件"""
        # 创建主容器
        self.main_container = tk.Frame(self.root, bg='#ecf0f1', bd=2, relief=tk.RAISED)
        self.main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # 标题区域
        title_frame = tk.Frame(self.main_container, bg='#3498db', height=80)
        title_frame.pack(fill=tk.X, pady=(0, 10))
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, 
                              text="🔍 数据安全提取工具", 
                              font=("微软雅黑", 18, "bold"),
                              fg='white', 
                              bg='#3498db')
        title_label.pack(expand=True)
        
        subtitle_label = tk.Label(title_frame,
                                 text="专为CTF和数据安全设计的智能提取工具",
                                 font=("微软雅黑", 10),
                                 fg='#eaf2f8',
                                 bg='#3498db')
        subtitle_label.pack(expand=True)
        
        # 主要内容区域
        content_frame = tk.Frame(self.main_container, bg='#ecf0f1')
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # 步骤1: 选择目标
        step1_frame = self.create_step_frame(content_frame, "步骤1: 选择扫描目标", 0)
        
        tk.Label(step1_frame, text="目标路径:", bg='#ecf0f1', font=("微软雅黑", 9)).grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.target_var = tk.StringVar()
        self.target_entry = tk.Entry(step1_frame, textvariable=self.target_var, width=50, font=("微软雅黑", 9))
        self.target_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        tk.Button(step1_frame, text="📁 浏览文件", 
                 command=self.browse_file, 
                 bg='#3498db', fg='white', font=("微软雅黑", 9)).grid(row=0, column=2, padx=(0, 5))
        
        tk.Button(step1_frame, text="📂 浏览目录", 
                 command=self.browse_directory, 
                 bg='#3498db', fg='white', font=("微软雅黑", 9)).grid(row=0, column=3)
        
        self.recursive_var = tk.BooleanVar(value=True)
        tk.Checkbutton(step1_frame, text="递归扫描子目录", 
                      variable=self.recursive_var, 
                      bg='#ecf0f1', 
                      font=("微软雅黑", 9),
                      activebackground='#ecf0f1').grid(row=1, column=1, sticky=tk.W, pady=(10, 0))
        
        # 步骤2: 选择数据类型
        step2_frame = self.create_step_frame(content_frame, "步骤2: 选择数据类型", 1)
        
        # 数据类型网格
        data_grid_frame = tk.Frame(step2_frame, bg='#ecf0f1')
        data_grid_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=10)
        
        self.type_vars = {}
        row, col = 0, 0
        for i, (data_type, config) in enumerate(self.patterns.items()):
            var = tk.BooleanVar(value=True)
            self.type_vars[data_type] = var
            
            cb = tk.Checkbutton(data_grid_frame, 
                               text=f"  {config['icon']} {config['description']}",
                               variable=var,
                               font=("微软雅黑", 9),
                               bg='#ecf0f1',
                               activebackground='#ecf0f1',
                               selectcolor='#3498db')
            cb.grid(row=row, column=col, sticky=tk.W, padx=(0, 15), pady=2)
            
            col += 1
            if col >= 4:
                col = 0
                row += 1
        
        # 选择按钮
        btn_frame = tk.Frame(step2_frame, bg='#ecf0f1')
        btn_frame.grid(row=1, column=0, columnspan=2, pady=10)
        
        tk.Button(btn_frame, text="✅ 全选", 
                 command=self.select_all_types,
                 bg='#27ae60', fg='white', font=("微软雅黑", 9)).pack(side=tk.LEFT, padx=(0, 10))
        
        tk.Button(btn_frame, text="❌ 全不选", 
                 command=self.deselect_all_types,
                 bg='#e74c3c', fg='white', font=("微软雅黑", 9)).pack(side=tk.LEFT)
        
        # 步骤3: 输出设置
        step3_frame = self.create_step_frame(content_frame, "步骤3: 输出设置", 2)
        
        tk.Label(step3_frame, text="输出目录:", bg='#ecf0f1', font=("微软雅黑", 9)).grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.output_var = tk.StringVar(value="output")
        self.output_entry = tk.Entry(step3_frame, textvariable=self.output_var, width=50, font=("微软雅黑", 9))
        self.output_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        tk.Button(step3_frame, text="📁 浏览", 
                 command=self.browse_output,
                 bg='#3498db', fg='white', font=("微软雅黑", 9)).grid(row=0, column=2)
        
        # 控制按钮区域
        button_frame = tk.Frame(content_frame, bg='#ecf0f1')
        button_frame.grid(row=3, column=0, columnspan=2, pady=15)
        
        # 开始扫描按钮
        self.scan_button = tk.Button(button_frame, 
                                    text="🚀 开始扫描", 
                                    command=self.start_scan,
                                    bg='#e67e22', fg='white', font=("微软雅黑", 10, "bold"),
                                    width=12, height=1)
        self.scan_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # 导出结果按钮
        self.export_button = tk.Button(button_frame, 
                                      text="💾 导出结果", 
                                      command=self.export_results,
                                      bg='#9b59b6', fg='white', font=("微软雅黑", 10, "bold"),
                                      width=12, height=1,
                                      state="disabled")  # 初始禁用
        self.export_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # 清空日志按钮
        tk.Button(button_frame, text="🗑️ 清空日志", 
                 command=self.clear_log,
                 bg='#95a5a6', fg='white', font=("微软雅黑", 9)).pack(side=tk.LEFT, padx=(0, 10))
        
        # 打开输出目录按钮
        tk.Button(button_frame, text="📂 打开目录", 
                 command=self.open_output_dir,
                 bg='#3498db', fg='white', font=("微软雅黑", 9)).pack(side=tk.LEFT)
        
        # 进度显示区域
        progress_frame = tk.Frame(content_frame, bg='#ecf0f1')
        progress_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(5, 10))
        
        # 进度标签
        self.progress_label = tk.Label(progress_frame, 
                                      text="进度: 等待开始", 
                                      bg='#ecf0f1', 
                                      font=("微软雅黑", 9))
        self.progress_label.pack(side=tk.LEFT)
        
        # 进度条
        self.progress_bar = ttk.Progressbar(progress_frame, 
                                           mode='determinate',
                                           length=400)
        self.progress_bar.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(10, 0))
        
        # 日志区域
        log_frame = self.create_step_frame(content_frame, "📝 扫描日志", 5)
        log_frame.grid_rowconfigure(0, weight=1)
        content_frame.grid_rowconfigure(5, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, 
                                                 height=15, 
                                                 font=("Consolas", 9),
                                                 bg='#2c3e50',
                                                 fg='#ecf0f1',
                                                 insertbackground='white')
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        
        # 状态栏
        status_frame = tk.Frame(self.main_container, bg='#34495e', height=25)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        status_frame.pack_propagate(False)
        
        self.status_var = tk.StringVar(value="🟢 就绪 - 欢迎使用数据安全提取工具")
        status_label = tk.Label(status_frame, 
                               textvariable=self.status_var, 
                               bg='#34495e', 
                               fg='#ecf0f1',
                               font=("微软雅黑", 9))
        status_label.pack(side=tk.LEFT, padx=10)
    
    def create_step_frame(self, parent, title, row):
        """创建步骤框架"""
        frame = tk.LabelFrame(parent, text=title, bg='#ecf0f1', fg='#2c3e50', 
                             font=("微软雅黑", 10, "bold"), padx=10, pady=10)
        frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        frame.columnconfigure(1, weight=1)
        return frame
    
    def update_progress(self, value, text=""):
        """更新进度条和进度标签"""
        self.progress_bar['value'] = value
        if text:
            self.progress_label.config(text=f"进度: {text}")
        self.root.update()
    
    def browse_file(self):
        filename = filedialog.askopenfilename(
            title="选择要扫描的文件",
            filetypes=[
                ("文本文件", "*.txt"),
                ("代码文件", "*.js *.css *.html *.xml *.json"),
                ("配置文件", "*.conf *.config *.ini *.yaml *.yml"),
                ("所有文件", "*.*")
            ]
        )
        if filename:
            self.target_var.set(filename)
            self.status_var.set(f"📄 已选择文件: {os.path.basename(filename)}")
    
    def browse_directory(self):
        directory = filedialog.askdirectory(title="选择要扫描的目录")
        if directory:
            self.target_var.set(directory)
            self.status_var.set(f"📁 已选择目录: {os.path.basename(directory)}")
    
    def browse_output(self):
        directory = filedialog.askdirectory(title="选择输出目录")
        if directory:
            self.output_var.set(directory)
    
    def select_all_types(self):
        for var in self.type_vars.values():
            var.set(True)
        self.status_var.set("✅ 已全选所有数据类型")
    
    def deselect_all_types(self):
        for var in self.type_vars.values():
            var.set(False)
        self.status_var.set("❌ 已取消所有选择")
    
    def get_selected_types(self):
        return [data_type for data_type, var in self.type_vars.items() if var.get()]
    
    def log(self, message):
        """添加日志"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def clear_log(self):
        """清空日志"""
        self.log_text.delete(1.0, tk.END)
        self.status_var.set("🗑️ 日志已清空")
    
    def start_scan(self):
        """开始扫描"""
        if self.is_scanning:
            return
        
        target = self.target_var.get().strip()
        if not target:
            messagebox.showerror("错误", "请选择扫描目标")
            return
        
        if not os.path.exists(target):
            messagebox.showerror("错误", "目标路径不存在")
            return
        
        selected_types = self.get_selected_types()
        if not selected_types:
            messagebox.showerror("错误", "请至少选择一种数据类型")
            return
        
        output_dir = self.output_var.get().strip()
        if not output_dir:
            output_dir = "output"
        
        # 重置进度条
        self.progress_bar['value'] = 0
        self.export_button.config(state="disabled")
        
        # 在新线程中执行扫描
        self.is_scanning = True
        self.scan_button.config(state="disabled")
        self.status_var.set("🔍 扫描进行中...")
        
        thread = threading.Thread(
            target=self.perform_scan,
            args=(target, selected_types, output_dir)
        )
        thread.daemon = True
        thread.start()
    
    def perform_scan(self, target, selected_types, output_dir):
        """执行扫描"""
        try:
            self.log("=" * 50)
            self.log("🚀 开始数据扫描任务")
            self.log("=" * 50)
            self.log(f"📋 目标: {target}")
            self.log(f"🎯 数据类型: {', '.join([self.patterns[t]['description'] for t in selected_types])}")
            self.log(f"💾 输出目录: {output_dir}")
            self.log("")
            
            # 创建输出目录
            output_path = Path(output_dir)
            output_path.mkdir(exist_ok=True)
            
            # 执行扫描
            if os.path.isfile(target):
                self.update_progress(30, "正在扫描文件...")
                results = self.scan_file(target, selected_types)
                if results:
                    self.scan_results = {target: results}
                    self.update_progress(70, "正在保存结果...")
                    self.save_results(results, output_path, target)
                    self.update_progress(100, "扫描完成!")
                else:
                    self.log("❌ 未找到任何匹配的数据")
                    self.update_progress(100, "扫描完成")
            else:
                self.update_progress(10, "正在扫描目录...")
                all_results = self.scan_directory(target, selected_types, output_path)
                if all_results:
                    self.scan_results = all_results
                    self.update_progress(80, "正在合并结果...")
                    self.save_batch_results(all_results, output_path)
                    self.update_progress(100, "扫描完成!")
                else:
                    self.log("❌ 未在任何文件中找到匹配的数据")
                    self.update_progress(100, "扫描完成")
            
            self.log("")
            self.log("✅ 扫描任务完成!")
            
        except Exception as e:
            self.log(f"💥 扫描出错: {str(e)}")
            self.update_progress(100, "扫描出错")
        finally:
            self.is_scanning = False
            self.root.after(0, self.scan_complete)
    
    def scan_complete(self):
        """扫描完成后的清理工作"""
        self.scan_button.config(state="normal")
        self.status_var.set("🟢 扫描完成")
        # 如果有扫描结果，启用导出按钮
        if self.scan_results:
            self.export_button.config(state="normal")
    
    def scan_file(self, file_path, selected_types):
        """扫描单个文件"""
        self.log(f"📄 处理文件: {file_path}")
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            results = {}
            for data_type in selected_types:
                config = self.patterns[data_type]
                matches = re.findall(config['pattern'], content)
                
                if matches:
                    unique_matches = []
                    for match in matches:
                        if match not in unique_matches:
                            unique_matches.append(match)
                    
                    results[data_type] = unique_matches
                    self.log(f"  ✅ {config['icon']} {config['description']}: {len(unique_matches)} 条")
            
            return results if results else None
            
        except Exception as e:
            self.log(f"  ❌ 读取文件失败: {str(e)}")
            return None
    
    def scan_directory(self, directory, selected_types, output_path):
        """扫描目录"""
        extensions = ['.txt', '.log', '.conf', '.js', '.css', '.html', '.xml', 
                     '.json', '.yaml', '.yml', '.csv', '.md', '.rst', '.ini', '.config']
        
        all_results = {}
        total_files = 0
        found_files = 0
        
        path = Path(directory)
        file_iterator = path.rglob('*') if self.recursive_var.get() else path.glob('*')
        files = [f for f in file_iterator if f.is_file() and f.suffix.lower() in extensions]
        total_files = len(files)
        
        for i, file_path in enumerate(files):
            progress = 10 + (i / total_files) * 60  # 10%到70%
            self.update_progress(progress, f"扫描文件中 ({i+1}/{total_files})")
            
            results = self.scan_file(str(file_path), selected_types)
            if results:
                found_files += 1
                all_results[str(file_path)] = results
        
        return all_results
    
    def save_results(self, results, output_path, source):
        """保存单个文件的结果"""
        total_count = 0
        
        for data_type, matches in results.items():
            config = self.patterns[data_type]
            filename = f"{data_type}.txt"
            filepath = output_path / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write('[')
                f.write(','.join([f'"{match}"' for match in matches]))
                f.write(']')
            
            total_count += len(matches)
            self.log(f"💾 保存 {config['description']} 到: {filename} ({len(matches)} 条)")
        
        self.log(f"📊 总计保存: {total_count} 条数据")
    
    def save_batch_results(self, all_results, output_path):
        """保存批量扫描结果"""
        merged_results = {}
        
        # 合并所有文件的结果
        for file_results in all_results.values():
            for data_type, matches in file_results.items():
                if data_type not in merged_results:
                    merged_results[data_type] = []
                merged_results[data_type].extend(matches)
        
        # 去重并保持顺序
        for data_type in merged_results:
            unique_matches = []
            for match in merged_results[data_type]:
                if match not in unique_matches:
                    unique_matches.append(match)
            merged_results[data_type] = unique_matches
        
        # 保存合并结果
        total_count = 0
        
        for data_type, matches in merged_results.items():
            config = self.patterns[data_type]
            filename = f"{data_type}.txt"
            filepath = output_path / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write('[')
                f.write(','.join([f'"{match}"' for match in matches]))
                f.write(']')
            
            total_count += len(matches)
            self.log(f"💾 保存 {config['description']} 到: {filename} ({len(matches)} 条)")
        
        # 统计信息
        total_files = len(all_results)
        self.log(f"📈 扫描统计:")
        self.log(f"  📁 总文件数: {total_files}")
        self.log(f"  📊 总数据条数: {total_count}")
    
    def export_results(self):
        """导出结果到指定文件"""
        if not self.scan_results:
            messagebox.showwarning("警告", "没有可导出的扫描结果")
            return
        
        # 选择导出文件位置
        filename = filedialog.asksaveasfilename(
            title="导出扫描结果",
            defaultextension=".json",
            filetypes=[("JSON文件", "*.json"), ("所有文件", "*.*")]
        )
        
        if not filename:
            return
        
        try:
            # 准备导出数据
            export_data = {
                "export_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "scan_results": self.scan_results,
                "patterns_used": {k: self.patterns[k]['description'] for k in self.get_selected_types()}
            }
            
            # 保存为JSON
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            self.log(f"💾 结果已导出到: {filename}")
            self.status_var.set(f"✅ 结果已导出: {os.path.basename(filename)}")
            
        except Exception as e:
            messagebox.showerror("导出错误", f"导出失败: {str(e)}")
    
    def open_output_dir(self):
        """打开输出目录"""
        output_dir = self.output_var.get().strip()
        if not output_dir:
            output_dir = "output"
        
        if os.path.exists(output_dir):
            os.startfile(output_dir)
        else:
            messagebox.showwarning("警告", "输出目录不存在")

def main():
    root = tk.Tk()
    app = DataExtractorGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()